name: Move PRs to "In review" in Project

on:
  pull_request:
    types: [opened, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: read
  repository-projects: write

jobs:
  move-to-in-review:
    runs-on: ubuntu-latest
    steps:
      - name: Move PR to "In review" in org project
        uses: actions/github-script@v7
        with:
          # Если GITHUB_TOKEN не видит проект, раскомментируйте строку ниже и добавьте secrets.ORG_PAT
          # github-token: ${{ secrets.ORG_PAT }}
          script: |
            const org = 'testovayaorganizatsia';
            const projectNumber = 1; // замените на номер из https://github.com/orgs/<org>/projects/<number>
            const statusFieldName = 'Status';
            const statusOptionName = 'In review';

            const pr = context.payload.pull_request;
            if (!pr) return core.setFailed('No pull_request payload');
            if (pr.draft) { core.notice('PR is draft; skipping'); return; }

            // Получить проект по номеру
            const data = await github.graphql(
              `query($org:String!, $number:Int!){
                organization(login:$org){
                  projectV2(number:$number){
                    id
                    fields(first:100){
                      nodes{
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }`,
              { org, number: projectNumber }
            );
            const project = data.organization?.projectV2;
            if (!project) return core.setFailed(`Project #${projectNumber} not found in org "${org}"`);

            const statusField = (project.fields?.nodes||[]).find(f => f?.name === statusFieldName);
            if (!statusField) return core.setFailed(`Field "${statusFieldName}" not found`);
            const statusOption = (statusField.options||[]).find(o => o.name === statusOptionName);
            if (!statusOption) return core.setFailed(`Option "${statusOptionName}" not found`);

            // Добавить PR в проект (если его там нет)
            const prNodeId = pr.node_id;
            let itemId = null;
            try {
              const addRes = await github.graphql(
                `mutation($projectId:ID!, $contentId:ID!){
                  addProjectV2ItemById(input:{ projectId:$projectId, contentId:$contentId }){
                    item { id }
                  }
                }`,
                { projectId: project.id, contentId: prNodeId }
              );
              itemId = addRes?.addProjectV2ItemById?.item?.id || null;
            } catch (e) {
              core.info(`addProjectV2ItemById: ${e.message}`);
            }

            if (!itemId) {
              // Найти уже существующий item
              let after = null;
              for(;;){
                const res = await github.graphql(
                  `query($projectId:ID!, $after:String){
                    node(id:$projectId){
                      ... on ProjectV2 {
                        items(first:100, after:$after){
                          nodes{ id content { ... on PullRequest { id } } }
                          pageInfo { hasNextPage endCursor }
                        }
                      }
                    }
                  }`,
                  { projectId: project.id, after }
                );
                const conn = res?.node?.items;
                const match = (conn?.nodes||[]).find(n => n.content && n.content.id === prNodeId);
                if (match) { itemId = match.id; break; }
                if (!conn?.pageInfo?.hasNextPage) break;
                after = conn.pageInfo.endCursor;
              }
            }

            if (!itemId) return core.setFailed('Project item not found or could not be created');

            // Установить Status = "In review"
            await github.graphql(
              `mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,
                  itemId:$itemId,
                  fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }){ projectV2Item { id } }
              }`,
              { projectId: project.id, itemId, fieldId: statusField.id, optionId: statusOption.id }
            );
            core.info('PR moved to "In review"');

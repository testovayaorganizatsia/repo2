name: PR → In review (Projects V2)

on:
  pull_request:
    types: [opened, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: read

jobs:
  move-to-in-review:
    runs-on: ubuntu-latest
    steps:
      - name: Using new workflow version
        run: |
          echo "Using new PR → In review workflow at $GITHUB_SHA"
          echo "Repo: $GITHUB_REPOSITORY | Event: $GITHUB_EVENT_NAME"

      - name: Move PR to In review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_TEST }}
          script: |
            const org = 'testovayaorganizatsia';
            const projectNumber = 1; // замените на номер из URL
            const statusFieldName = 'Status';
            const statusOptionName = 'In review';

            const sleep = (ms)=>new Promise(r=>setTimeout(r,ms));
            async function gql(q, v, retries=3){
              for (let i=0;i<retries;i++){
                try { return await github.graphql(q, v); }
                catch(e){
                  const msg = e?.message || String(e);
                  if (i === retries-1) { core.error(JSON.stringify(e, null, 2)); throw e; }
                  if (/Something went wrong/i.test(msg) || (e.status && e.status >= 500)) {
                    core.warning(`Retry ${i+1}: ${msg}`); await sleep(1000*(i+1)); continue;
                  }
                  throw e;
                }
              }
            }

            const pr = context.payload.pull_request;
            if (!pr) return core.setFailed('No pull_request payload');
            if (pr.draft) { core.notice('PR is draft; skipping'); return; }

            const data = await gql(
              `query($org:String!, $number:Int!){
                organization(login:$org){
                  projectV2(number:$number){
                    id
                    title
                    fields(first:100){
                      nodes{
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }`,
              { org, number: projectNumber }
            );
            const project = data.organization?.projectV2;
            if (!project) return core.setFailed(`Project #${projectNumber} not found in org "${org}"`);

            const statusField = (project.fields?.nodes||[]).find(f => f?.name === statusFieldName);
            if (!statusField) return core.setFailed(`Field "${statusFieldName}" not found in project "${project.title}"`);
            const statusOption = (statusField.options||[]).find(o => o.name === statusOptionName);
            if (!statusOption) return core.setFailed(`Option "${statusOptionName}" not found in "${statusFieldName}"`);

            const prNodeId = pr.node_id;
            let itemId = null;
            try {
              const addRes = await gql(
                `mutation($projectId:ID!, $contentId:ID!){
                  addProjectV2ItemById(input:{ projectId:$projectId, contentId:$contentId }){
                    item { id }
                  }
                }`,
                { projectId: project.id, contentId: prNodeId }
              );
              itemId = addRes?.addProjectV2ItemById?.item?.id || null;
            } catch (e) {
              core.info(`addProjectV2ItemById: ${e.message} (may already exist)`);
            }

            if (!itemId) {
              let after = null;
              for (;;) {
                const res = await gql(
                  `query($projectId:ID!, $after:String){
                    node(id:$projectId){
                      ... on ProjectV2 {
                        items(first:100, after:$after){
                          nodes{ id content { ... on PullRequest { id } } }
                          pageInfo { hasNextPage endCursor }
                        }
                      }
                    }
                  }`,
                  { projectId: project.id, after }
                );
                const conn = res?.node?.items;
                const match = (conn?.nodes||[]).find(n => n.content && n.content.id === prNodeId);
                if (match) { itemId = match.id; break; }
                if (!conn?.pageInfo?.hasNextPage) break;
                after = conn.pageInfo.endCursor;
              }
            }

            if (!itemId) return core.setFailed('Project item not found or could not be created');

            await gql(
              `mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,
                  itemId:$itemId,
                  fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }){ projectV2Item { id } }
              }`,
              { projectId: project.id, itemId, fieldId: statusField.id, optionId: statusOption.id }
            );
            core.info('PR moved to "In review"');

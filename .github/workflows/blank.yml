name: Add issue to Backlog

on:
  issues:
    types: [milestoned]

jobs:
  add-to-backlog:
    name: Add issue to Backlog
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_TEST }}
          ORGANIZATION: testovayaorganizatsia
          PROJECT_NUMBER: 1
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo "===== RAW project_data.json ====="
          cat project_data.json | jq .

          echo "PROJECT_ID=$(jq -r '.data.organization.projectV2.id' project_data.json)" >> $GITHUB_ENV
          echo "STATUS_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Status") | .id' project_data.json)" >> $GITHUB_ENV
          echo "TODO_COLUMN_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="Todo") | .id' project_data.json)" >> $GITHUB_ENV


      - name: Add issue to project
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_TEST }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
        run: |
          ITEM_ID=$(gh api graphql -f query='
            mutation($project: ID!, $issue: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item { id }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')

          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV

      - name: Move issue to Todo
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_TEST }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          ITEM_ID: ${{ env.ITEM_ID }}
          TODO_COLUMN_ID: ${{ env.TODO_COLUMN_ID }}
          STATUS_FIELD_ID: ${{ env.STATUS_FIELD_ID }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!,
              $item: ID!,
              $status_field: ID!,
              $status_value: String!
            ) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project,
                itemId: $item,
                fieldId: $status_field,
                value: { singleSelectOptionId: $status_value }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          ' \
          -f project=$PROJECT_ID \
          -f item=$ITEM_ID \
          -f status_field=$STATUS_FIELD_ID \
          -f status_value=$TODO_COLUMN_ID
